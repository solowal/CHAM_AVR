
AVR_CHAM_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .MySection    00000020  00000800  00000800  00000216  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000268  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001af  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d8  00000000  00000000  00000457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000177  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	3f d0       	rcall	.+126    	; 0x132 <main>
  b4:	60 c0       	rjmp	.+192    	; 0x176 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <CHAM_EncryptBlk>:
#define X8 R26 //R26
#define X9 R27 //R27

	CHAM_EncryptBlk:

	PUSH R2
  b8:	2f 92       	push	r2
	
	MOVW R26, R24	//plain 
  ba:	dc 01       	movw	r26, r24
	
	LD X0, X+
  bc:	4d 91       	ld	r20, X+
	LD X1, X+
  be:	5d 91       	ld	r21, X+
	LD X2, X+
  c0:	6d 91       	ld	r22, X+
	LD X3, X+
  c2:	7d 91       	ld	r23, X+
	LD X4, X+
  c4:	0d 90       	ld	r0, X+
	LD X5, X+
  c6:	1d 90       	ld	r1, X+
	LD X6, X+
  c8:	2d 91       	ld	r18, X+
	LD X7, X+	
  ca:	3d 91       	ld	r19, X+
	
	PUSH R26
  cc:	af 93       	push	r26
	PUSH R27
  ce:	bf 93       	push	r27
	
	CLR C0
  d0:	88 27       	eor	r24, r24
	CLR ZERO
  d2:	22 24       	eor	r2, r2
	LDI R31, 0X08
  d4:	f8 e0       	ldi	r31, 0x08	; 8
	CLR R30
  d6:	ee 27       	eor	r30, r30

000000d8 <STEP1>:

	STEP1:
	MOVW X8, X2
  d8:	db 01       	movw	r26, r22

	LSL X2
  da:	66 0f       	add	r22, r22
	ROL X3
  dc:	77 1f       	adc	r23, r23
	ADC X2, ZERO
  de:	62 1d       	adc	r22, r2

	EOR X0, C0	
  e0:	48 27       	eor	r20, r24
	ANDI R30, 31
  e2:	ef 71       	andi	r30, 0x1F	; 31

	LPM C1, Z+
  e4:	95 91       	lpm	r25, Z+
	EOR X2, C1
  e6:	69 27       	eor	r22, r25

	LPM C1, Z+
  e8:	95 91       	lpm	r25, Z+
	EOR X3, C1
  ea:	79 27       	eor	r23, r25

	ADD X0, X2
  ec:	46 0f       	add	r20, r22
	ADC X1, X3
  ee:	57 1f       	adc	r21, r23

	INC C0
  f0:	83 95       	inc	r24
	
	// SECOND

	MOVW X2, X4
  f2:	b0 01       	movw	r22, r0
	EOR X8, C0	
  f4:	a8 27       	eor	r26, r24

	//ANDI R30, 31

	LPM C1, Z+
  f6:	95 91       	lpm	r25, Z+
	EOR X5, C1		//REVERSE
  f8:	19 26       	eor	r1, r25

	LPM C1, Z+
  fa:	95 91       	lpm	r25, Z+
	EOR X4, C1		//REVERSE
  fc:	09 26       	eor	r0, r25

	ADD X8, X5		//REVERSE
  fe:	a1 0d       	add	r26, r1
	ADC X9, X4
 100:	b0 1d       	adc	r27, r0

	LSL X8
 102:	aa 0f       	add	r26, r26
	ROL X9
 104:	bb 1f       	adc	r27, r27
	ADC X8, ZERO
 106:	a2 1d       	adc	r26, r2

	MOV X4, X1
 108:	05 2e       	mov	r0, r21
	MOV X5, X0
 10a:	14 2e       	mov	r1, r20

	MOVW X0, X2
 10c:	ab 01       	movw	r20, r22
	MOVW X2, X6
 10e:	b9 01       	movw	r22, r18
	MOVW X6, X8
 110:	9d 01       	movw	r18, r26

	//
	INC C0
 112:	83 95       	inc	r24
	//ADIW C0, 2

	CPI C0, 80
 114:	80 35       	cpi	r24, 0x50	; 80
	BRLT STEP1	
 116:	04 f3       	brlt	.-64     	; 0xd8 <STEP1>

	POP R27
 118:	bf 91       	pop	r27
	POP R26
 11a:	af 91       	pop	r26
		
	ST -X, X7
 11c:	3e 93       	st	-X, r19
	ST -X, X6
 11e:	2e 93       	st	-X, r18
	ST -X, X5
 120:	1e 92       	st	-X, r1
	ST -X, X4
 122:	0e 92       	st	-X, r0
	ST -X, X3
 124:	7e 93       	st	-X, r23
	ST -X, X2
 126:	6e 93       	st	-X, r22
	ST -X, X1
 128:	5e 93       	st	-X, r21
	ST -X, X0
 12a:	4e 93       	st	-X, r20
	
	CLR R1
 12c:	11 24       	eor	r1, r1
	POP R2
 12e:	2f 90       	pop	r2
	
	RET
 130:	08 95       	ret

00000132 <main>:
//const u16 RK2[16]= { 0x0301,0x0705,0x0b09,0x0f0d,0x1311,0x1715,0x1b19,0x1f1d,0x151e,0x0308,0x3932,0x2f24,0x4d46,0x5b50,0x616a,0x777c};
const u16 RK[16] __attribute__ ((section(".MySection")))= { 0x0301,0x0705,0x0b09,0x0f0d,0x1311,0x1715,0x1b19,0x1f1d,0x151e,0x0308,0x3932,0x2f24,0x4d46,0x5b50,0x616a,0x777c};
u16 plaintext64[] = {0x1100, 0x3322, 0x5544, 0x7766};

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x8>
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	u16 A = pgm_read_byte_near(RK+1);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	98 e0       	ldi	r25, 0x08	; 8
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	fc 01       	movw	r30, r24
 14e:	84 91       	lpm	r24, Z
 150:	8b 83       	std	Y+3, r24	; 0x03
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	9d 83       	std	Y+5, r25	; 0x05
 15a:	8c 83       	std	Y+4, r24	; 0x04
	//u16 B = pgm_read_byte_near(RK2+2);
   CHAM_EncryptBlk(plaintext64);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	ab df       	rcall	.-170    	; 0xb8 <CHAM_EncryptBlk>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
